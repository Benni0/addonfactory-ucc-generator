var path = require('path');
var utils = require("../common/utils.js");
var artifactory = require('../common/artifactory');
var execSync = require('child_process').execSync;

module.exports = function(grunt) {
    'use strict';

    var fs = require('fs');
    var createHash = require('sha.js');
    var installPath = path.join(__dirname, '..', '..', '..');
    grunt.config('test-dir', grunt.option('test-dir') || './test');
    grunt.config('jasmine-version', grunt.option('jasmine-version') || '2.4.1');
    grunt.config('browser', grunt.option('browser') || 'phantomjs');
    grunt.config('splunkweb', grunt.option('splunkweb') || 'http://localhost:8000/');
    grunt.config('username', grunt.option('username') || 'admin');
    grunt.config('password', grunt.option('password') || 'changeme');
    grunt.config('drivers-path', grunt.option('drivers-path') || installPath + '/node_modules/.bin/phantomjs');
    grunt.config('junitxml', grunt.option('junitxml') || 'test_result.xml');

    var killcmd = '';
    if (grunt.config.get('browser') === 'phantomjs') {
        killcmd = '; if pgrep phantomjs >/dev/null; then killall phantomjs; fi';
    }

    var test_access = function(in_file) {
        var my_return;

        try {
            fs.accessSync(in_file, fs.R_OK | fs.W_OK);
            my_return = true;
        } catch (e) {
            my_return = false;
        }

        return my_return;
    };

    var check_files = function(in_file, out_file) {
        var my_return = {};
        my_return[in_file] = test_access(in_file);
        my_return[out_file] = test_access(out_file);

        return my_return;
    };

    var get_hash = function(in_file) {
        var contents = fs.readFileSync(in_file, 'utf8');
        var sha256 = createHash('sha256');
        var h = sha256.update(contents, 'utf8').digest('hex');
        return h;
    };

    var do_process = function(in_file) {
        var base_file = path.parse(in_file).base;
        var fingerprint_file = get_fingerprint_filename(in_file);

        var file_available = check_files(in_file, fingerprint_file);

        // No requirements.txt, nothing to download
        if (!file_available[in_file]) {
            console.log("No " + base_file);
            return false;
        }

        // Requirements.txt exists, but no fingerprint. Proceed with download.
        if ((file_available[in_file]) && !(file_available[fingerprint_file])) {
            return true;
        }

        // Requirements.txt exists and fingerprint exists too
        // if the file has changed, re-process

        var current_hash = get_hash(in_file);
        var previous_hash = fs.readFileSync(fingerprint_file, 'utf8');

        if (current_hash == previous_hash) {
            // nothing to do.
            console.log(base_file + " dependencies up to date.");
            return false;
        }

        // Requirements.txt must have changed since last run.
        console.log("Will process " + base_file);
        return true;
    };

    var get_fingerprint_filename = function(in_file) {

        var base_file = path.parse(in_file).base;
        var fingerprint_file = installPath + '/pypi_modules/.' + base_file + '.fp';
        return fingerprint_file;
    };

    var create_fingerprint = function(in_file) {
        var fingerprint_file = get_fingerprint_filename(in_file);

        var fingerprint = get_hash(in_file);

        if (!fs.existsSync(installPath + '/pypi_modules')) {
            fs.mkdirSync(installPath + '/pypi_modules');
        }

        fs.writeFileSync(fingerprint_file, fingerprint, 'utf8');
    };

    return {
        options: {
            stdout: true,
            stderr: false,
            failOnError: true,
            execOptions: {
                maxBuffer: 1024 * 1024
            }
        },
      artifactory_push: {
        command: function(confFilePath, artifactPath) {
            try{
                return artifactory.push(confFilePath, artifactPath)
            }
            catch(err){
                grunt.fail.fatal(err);
            }
        },
        options: {
          stdout: true
        }
      },
      artifactory_pull: {
        command: function(refresh_deps) {
          var flag = (refresh_deps === true || refresh_deps === "true")
          
          return artifactory.pull(flag);
        },
        options: {
            callback: function(err, stdout, stderr, cb) {
              if (err != null) {
                // Continue in case of connection error with cached data else fail
                if (err.message.includes("ConnectionError") == false) {
                  grunt.fail.fatal("Could not pull from artifactory " + err);
                } else {
                  console.warn('Could not connect to Arfiactory');
                }
              }
              cb();
            }
          }
        },
        bower_cleancache: {
            command: 'bower cache clean',
            stdout: true,
            options: {
                callback: function(err, stdout, stderr, cb) {
                    if (err != null) {
                        grunt.fail.fatal("Could not clean bower cache " + err);
                    }
                    cb();
                }
            }
        },
        bower_install: {
            command: 'bower update --allow-root',
            stdout: true,
            options: {
                callback: function(err, stdout, stderr, cb) {
                    if (err != null) {
                        grunt.fail.fatal("Could not run bower install " + err);
                    }
                    cb();
                }
            }
        },
        publish: {
            command: function() {
                var data = grunt.file.read(process.env['HOME'] + '/.artifactory_python.cfg').split("\n");

                var index1 = utils.searchStringInArray("username", data, true);
                var index2 = utils.searchStringInArray("password", data, true);
                if ((index1 != -1) && (index2 != -1)) {

                    var username = data[index1];
                    var pos = username.indexOf("=");
                    username = username.substring(pos + 1, username.length).trim();

                    var password = data[index2];
                    pos = password.indexOf("=");
                    password = password.substring(pos + 1, password.length).trim();

                    var cred = username + ':' + password;

                    return "curl -u'" + cred + "' " + "-XPUT https://repo.splunk.com/artifactory/bower-solutions-local/appcommon/<%=buildinfo.name%>/<%=buildinfo.name%>-<%=buildinfo.version%>.tar.gz " + "-T <%=buildinfo.name%>.tar.gz";
                } else {
                    console.log("Username/password not set");
                }
            }
        },
        publish_api: {
            command: function() {
                if (!grunt.option('auth')) {
                    grunt.warn('--auth <authorization> parameter required');
                } else {
                    // console.log(__dirname);
                    return 'python build/setup.py sdist upload -r local';
                }
            }
        },
        base_pypi_pull: {
            command: function() {
                var req_file = 'basebuild_requirements.txt';

                var m_dir = path.join(installPath, 'pypi_modules');
                var r_txt = path.join(installPath, 'node_modules', 'ext-grunt-basebuild', req_file);

                var proceed = do_process(r_txt);

                if (!proceed) {
                    return "echo Skipping base PyPI pull.";
                }

                create_fingerprint(r_txt);

                return "CFLAGS='-std=c99' pip install --upgrade --no-compile --target " + m_dir + " -i  https://repo.splunk.com/artifactory/api/pypi/pypi-virtual/simple -r " + r_txt;
            }
        },
        pypi_pull: {
            command: function() {
                var req_file = 'requirements.txt';

                var m_dir = path.join(installPath, 'pypi_modules');
                var r_txt = path.join(installPath, 'requirements.txt');

                var proceed = do_process(r_txt);

                if (!proceed) {
                    return "echo Skipping PyPI pull.";
                }

                create_fingerprint(r_txt);

                return "CFLAGS='-std=c99' pip install --upgrade --no-compile --target " + m_dir + " -i  https://repo.splunk.com/artifactory/api/pypi/pypi-virtual/simple -r " + r_txt;
            }
        },
        pypi_pull_dev: {
            command: function() {
                var req_file = 'requirements_dev.txt';

                var m_dir = path.join(installPath , 'pypi_modules');
                var r_txt = path.join(installPath , 'requirements_dev.txt');

                var proceed = do_process(r_txt);

                if (!proceed) {
                    return "echo Skipping PyPI pull for dev.";
                }

                create_fingerprint(r_txt);

                return "CFLAGS='-std=c99' pip install --upgrade --no-compile --target " + m_dir + " -i  https://repo.splunk.com/artifactory/api/pypi/pypi-virtual/simple -r " + r_txt;
            }
        },
        pypi_pull_cleanup: {
            command: function() {
                var m_dir = path.join(installPath , 'pypi_modules');
                console.log("rm -rf " + m_dir + "/*.egg-info || echo nothing to cleanup");
                return "rm -rf " + m_dir + "/*.egg-info || echo nothing to cleanup";
            }
        },
        pypi_create_package: {
            command: function() {
                var p_dir = path.join(__dirname, '..', '..', '..');
                var r_txt = path.join(p_dir, 'requirements.txt');
                return "[[ -s " + r_txt + " ]] && mkdir -p stage/app-<%=buildinfo.name%>/bin/app_<%=buildinfo.name.replace(/-/g, '_')%> && touch stage/app-<%=buildinfo.name%>/bin/app_<%=buildinfo.name.replace(/-/g, '_')%>/__init__.py || echo no requirements.txt";
            }
        },
        run_jasmine_tests: {
            command: 'PYTHONPATH=' + installPath + '/pypi_modules python -m jastest --test-dir=' + grunt.config.get('test-dir') + ' --splunkweb=' + grunt.config.get('splunkweb') +
                    ' --splunkapp=app-<%=buildinfo.name%> --username=' + grunt.config.get('username') + ' --password=' + grunt.config.get('password') +
                    ' --browser=' + grunt.config.get('browser') + ' --jasmine-version=' + grunt.config.get('jasmine-version') + ' --drivers-path=' +
                    grunt.config.get('drivers-path') + ' --junitxml=' + grunt.config.get('junitxml') + killcmd,
            stdout: true
        },
        run_locust: {
            command: function() {
                return 'PYTHONPATH=../../../pypi_modules/lib/python2.7/site-packages ../../../pypi_modules/bin/locust ' +
                    '-f stage/app-<%=buildinfo.name%>/tests/locustio_test_<%=buildinfo.name%>.py ' +
                    '--host=https://<%=environments.splunk_ip_port%> --port=9001 --no-web -c 1 -r 1 --only-summary ' +
                    '-n 50 --print-stats --logfile=/tmp/<%=buildinfo.name%>.log';
            }
        },
        npm_publish: {
            command:[
                "cp package.json build/<%= buildinfo.name %>",
                "cd build/<%= buildinfo.name %>",
                "echo \'bower.json\' > .npmignore",
                "npm pack",
                "npm publish --registry https://repo.splunk.com/artifactory/api/npm/npm-solutions-local <%= buildinfo.name %>-<%= package.version %>.tgz"
            ].join('&&'),
            options: {
                stdout: true
            }
        },
        remove_sample: {
            command: [
                "rm -rf stage/samples",
                "rm -f stage/default/eventgen.conf",
                "echo \"remove sample success\""
            ].join('&&'),
            options: {
                stdout: true
            }
        }
    };
};
