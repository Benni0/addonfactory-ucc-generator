var path = require('path');
var utils = require('./utils');
var fs = require('fs');
var execSync = require('child_process').execSync;
var grunt = require('grunt');

var ARTIFACTS_CONF_NAME = 'artifacts.conf';

function push(confFilePath, artifactPath) {
    var lastCommit = utils.getLastCommit();
    var configFile = path.join(confFilePath, ARTIFACTS_CONF_NAME);
    var branchPath = artifactPath;
    var installPath = path.join(__dirname, '..', '..', '..');

    if (fs.existsSync(configFile)) {
        var config = utils.parseIni(configFile);

        var repoUrl = config.artifactory.url;

        // push to a specified location
        var target = grunt.option('publish_target');
        if (target == 'staging' || target == 'test') {
            repoUrl = repoUrl.replace(/\/([^/]+)\/*$/, '/$1-' + target + '/');
        }

        if (branchPath.length == 0){
            branchPath = config.artifactory.branchpath;
        }

        var name = branchPath.match(new RegExp("(.*)/(builds|branches|releases)/"));
        if (name !== null){
            name = name[1];

            // specify a different folder when pushing app
            var new_app_folder = grunt.option('new_app_folder');
            if (new_app_folder) {
                name = name.replace(/[^/]+\/*$/, new_app_folder);
            }

            var gitbranch = execSync('git branch | cut -d \' \' -f2').toString();
            gitbranch = gitbranch.trim();
            var patt = new RegExp("develop|master|feature|bug|bugfix|Bugfix|Feature|Bug|task|test|epic|pull-requests|merge|migration");
            if(gitbranch.startsWith('release')){
                branchPath = name + '/builds/' + grunt.config.get('buildinfo.version');
            }
            else if(patt.test(gitbranch)){
                branchPath = name + '/builds/' + gitbranch
            }
            else{
                throw "The branch name must follow naming convention <branch>/* where branch can be [develop|master|feature|bug|bugfix|Bugfix|Feature|Bug|task|test|epic|pull-requests|merge|migration]. Change and retry"
            }
        }
        else
        {
              throw "The \'branchpath'\ value in artifacts.conf is not as per standards. The branch name folder should be under \'builds'\ folder. Change and retry."
        }

        var packagepostfix = "";
        if (grunt.option('withsample')) {
            packagepostfix = "sample"
        }

        var cmd = 'PYTHONPATH=' + installPath + '/pypi_modules' + ' python ' + installPath + '/pypi_modules/artifactory_tool/artifacts.py'
              + ' --url ' + repoUrl
              + ' --configpath ' + confFilePath
              + ' --branchpath ' + branchPath
              + ' --push '
              + ' --file <%= buildinfo.name %>-<%= buildinfo.version%>' + packagepostfix + '-<%=buildinfo.buildNumber%>.<%= buildinfo.extension%>'
              + ' --buildnumber  <%=buildinfo.buildNumber%>'
              + ' --commit ' + lastCommit;
        return cmd;
    } else {
        return "";
    }
}

function pull(refreshDeps) {
  var p_dir = path.join(__dirname, '..', '..', '..');
  var installPath = path.join(__dirname, '..', '..', '..');

  var artifacts_params_with_sample = 'false';
  if (grunt.option('withsample')) {
      artifacts_params_with_sample = 'true';
  }

  var cmd = 'PYTHONPATH=' + installPath + '/pypi_modules' + ' python ' + installPath + '/pypi_modules/artifactory_tool/artifacts.py'
            + ' --pull --configpath .' + ' --withsample=' + artifacts_params_with_sample;
  if (refreshDeps) {
    cmd += ' --refresh_deps';
  }

  return cmd;
}

module.exports = {
  push: push,
  pull: pull,
};
