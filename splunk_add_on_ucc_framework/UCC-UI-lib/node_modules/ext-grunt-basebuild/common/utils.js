var override = require('json-override');
var grunt = require('grunt');
var fs = require('fs');
var ini = require('ini');
var execSync = require('child_process').execSync;

var stringToObj = function(path,value,obj) {
  var parts = path.split("."), part;
  var last = parts.pop();
  while(part = parts.shift()) {
   if( typeof obj[part] != "object") obj[part] = {};
   obj = obj[part]; // update "pointer"
  }
 obj[last] = value;
}

function ltrim(str, chr) {
  var rgxtrim = (!chr) ? new RegExp('^\\s+') : new RegExp('^'+chr+'+');
  return str.replace(rgxtrim, '');
}

function parseIni(filePath) {
  return ini.parse(fs.readFileSync(filePath, 'utf-8'));
}

function getLastCommit() {
  var buf = execSync('git rev-parse HEAD | cut -c1-10');
  var ret = buf.toString();
  return ret && ret.replace('\n', '');
}


module.exports = {
    isenabled: function(grunt,userflag){
	var state = false;
        var buildinfoval = 'buildinfo.' + userflag;
        if(grunt.option(userflag) == true){
           state = true;
        }
        else if(grunt.option(userflag) == false){
           state = false;
        }
        else{
           state = grunt.config.get(buildinfoval) || false;
        }
	if((state != true) && (state != false)){
	   throw new UserException('Invalid value specified for flag : ' + userflag);
	}
	return state;
    },

    searchStringInArray: function(str, strArray, partialMatch) {
	var partialMatch = typeof partialMatch !== 'undefined' ?  partialMatch : 1;
        for (var j=0; j<strArray.length; j++) {

	    var majorstr = '';
	    var minorstr = '';

	    if (strArray[j].length > str.length){
	        majorstr = strArray[j];
		minorstr = str;
	    }
	    else{
		majorstr = str;
		minorstr = strArray[j];
	    }

            if (partialMatch && (majorstr.indexOf(minorstr) != -1)){
		 return j;
	    }
	    if (str == strArray[j]) return j;
        }
        return -1;
    },

    overrideconfigs : function(buildinfo, localfile) {

        var localconfig = grunt.option('localconfig');
        var localconfig = typeof localconfig == 'undefined' ? true : localconfig;

        if((process.env['USER'] != 'bamboo') && localconfig && grunt.file.exists(localfile)) {
            buildinfo = override(buildinfo, grunt.file.readJSON("local.properties.json"), true);
        };

        for (var i=2;i<process.argv.length;i++){
            var res = ltrim(process.argv[i],"--").split('=');
            var obj = {};
	    if (res[0] == localconfig){
	        continue;
	    }
            var value = grunt.option(res[0]);
            stringToObj(res[0],value,obj);
            buildinfo = override(buildinfo, obj, true);
        }

        return buildinfo;
    },
  parseIni: parseIni,
  getLastCommit: getLastCommit,
};
